import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'formingMagicSquare' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY s as parameter.
     */

    public static int formingMagicSquare(List<List<Integer>> s) {
        
        int[] a1 = {4, 9, 2, 3, 5, 7, 8, 1, 6};
        int[] a2 = {2, 9, 4, 7, 5, 3, 6, 1, 8};
        int[] a3 = {6, 1, 8, 7, 5, 3, 2, 9, 4};
        int[] a4 = {8, 3, 4, 1, 5, 9, 6, 7, 2};
        int[] a5 = {2, 7, 6, 9, 5, 1, 4, 3, 8};
        int[] a6 = {6, 7, 2, 1, 5, 9, 8, 3, 4};
        int[] a7 = {8, 1, 6, 3, 5, 7, 4, 9, 2};
        int[] a8 = {4, 3, 8, 9, 5, 1, 2, 7, 6};
        int k=0,c1=0,c2=0,c3=0,c4=0,c5=0,c6=0,c7=0,c8=0;
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                c1+=(int)Math.abs(a1[k]-s.get(i).get(j));
                c2+=(int)Math.abs(a2[k]-s.get(i).get(j));
                c3+=(int)Math.abs(a3[k]-s.get(i).get(j));
                c4+=(int)Math.abs(a4[k]-s.get(i).get(j));
                c5+=(int)Math.abs(a5[k]-s.get(i).get(j));
                c6+=(int)Math.abs(a6[k]-s.get(i).get(j));
                c7+=(int)Math.abs(a7[k]-s.get(i).get(j));
                c8+=(int)Math.abs(a8[k]-s.get(i).get(j));
                k++;
            }
        }
        List<Integer> result=new ArrayList<Integer>();
        result.add(c1);
        result.add(c2);
        result.add(c3);
        result.add(c4);
        result.add(c5);
        result.add(c6);
        result.add(c7);
        result.add(c8);
        Collections.sort(result);
        return result.get(0);

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        List<List<Integer>> s = new ArrayList<>();

        IntStream.range(0, 3).forEach(i -> {
            try {
                s.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int result = Result.formingMagicSquare(s);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
